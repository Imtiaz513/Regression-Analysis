library(readxl)
responses_1_ <- read_excel("responses (1).xlsx")
View(responses_1_)
########
# Removing the first two rows
data<-responses_1_
data <- data[-c(1, 2), ]
View(data)
data <- data[-c(1, 2), ]
########
# Removing the first two rows
remove(data)
data<-responses_1_
# Remove the first column
data <- data[, -1]
View(data)
# Remove the first column
data <- data[, -1]
# Remove the last column
data <- data[, -ncol(data)]
View(responses_1_)
# Remove the last column
data <- data[, -ncol(data)]
str(data)
# Remove the last column
data <- data[, -ncol(data)]
# Remove the last column
data <- data[, -ncol(data)]
# Remove the last column
data <- data[, -ncol(data)]
# Remove the last column
data <- data[, -ncol(data)]
View(data)
str(data)
library(dplyr)
library(stringr)
# Step 1: Store original variable names as labels
labels <- colnames(data)
# Step 2: Programmatically shorten variable names
# Remove spaces, special characters, and make concise names
shortened_names <- labels %>%
str_replace_all("\\s+", "_") %>%  # Replace spaces with underscores
str_replace_all("[^[:alnum:]_]", "") %>%  # Remove non-alphanumeric characters
str_sub(1, 30)  # Limit to 30 characters for brevity
# Step 3: Rename variables and add labels
data <- data %>%
rename_with(~ shortened_names, everything())
# Step 1: Store original variable names as labels
labels <- colnames(data)
# Step 2: Programmatically shorten variable names and ensure uniqueness
shortened_names <- labels %>%
str_replace_all("\\s+", "_") %>%   # Replace spaces with underscores
str_replace_all("[^[:alnum:]_]", "") %>%   # Remove non-alphanumeric characters
str_sub(1, 30)                     # Truncate to 30 characters for brevity
# Ensure unique names by appending numeric suffixes to duplicates
shortened_names <- make.names(shortened_names, unique = TRUE)
# Step 3: Rename variables and add labels
data <- data %>%
rename_with(~ shortened_names, everything())
# Step 4: Add a `data_labels` tibble to store original and shortened names
data_labels <- tibble(
variable = shortened_names,
label = labels
)
# View the updated data and labels
print(data)
# Step 1: Store original variable names as labels
labels <- colnames(data)
# Step 2: Programmatically shorten variable names and ensure uniqueness
shortened_names <- labels %>%
str_replace_all("\\s+", "_") %>%   # Replace spaces with underscores
str_replace_all("[^[:alnum:]_]", "") %>%   # Remove non-alphanumeric characters
str_sub(1, 30)                     # Truncate to 30 characters for brevity
shortened_names <- make.names(shortened_names, unique = TRUE)  # Ensure unique names
# Step 3: Rename columns and retain original names as labels
for (i in seq_along(data)) {
attr(data[[i]], "label") <- labels[i]  # Add original name as a label
}
# Apply the shortened names to the dataset
colnames(data) <- shortened_names
# Step 4: Check results
# View dataset with shortened names
print(data)
# View labels for each variable
variable_labels <- tibble(
variable = shortened_names,
label = sapply(data, function(x) attr(x, "label"))
)
print(variable_labels)
str(data)
data$Safety <- rowMeans(data[, c(
"How_safe_do_you_feel_it_is_to_",
"How_safe_would_you_feel_in_thi",
"How_safe_would_you_feel_enteri"
)], na.rm = TRUE)
data$Comfort <- rowMeans(data[, c(
"How_comfortable_do_you_feel_to",
"How_comfortable_would_you_feel",
"How_comfortable_would_you_feel.1",
"How_comfortable_would_you_feel.2"
)], na.rm = TRUE)
data$Welcoming <- rowMeans(data[, c(
"How_welcome_do_you_feel_to_ent",
"How_connected_do_you_feel_to_t",
"How_connected_do_you_feel_to_t.1",
"How_connected_do_you_feel_to_t.2",
"How_connected_do_you_feel_to_t.3"
)], na.rm = TRUE)
data$Ease_of_Access <- rowMeans(data[, c(
"How_easy_does_it_seem_to_enter",
"How_easy_does_it_seem_to_enter.1",
"How_easy_would_it_be_to_move_a"
)], na.rm = TRUE)
data$Likelihood_of_Use <- rowMeans(data[, c(
"How_likely_are_you_to_use_this",
"How_likely_are_you_to_use_this.1"
)], na.rm = TRUE)
data$Interactivity <- rowMeans(data[, c(
"Is_this_a_good_space_to_intera",
"Is_this_a_good_space_to_intera.1",
"Is_this_a_good_space_to_intera.2"
)], na.rm = TRUE)
data$Belongingness <- rowMeans(data[, c(
"How_much_do_feel_you_belong_in",
"How_much_do_feel_you_belong_in.1"
)], na.rm = TRUE)
data$Outside_Judgment <- rowMeans(data[, c(
"Judging_from_the_outside_how_w",
"Judging_from_the_outside_do_yo",
"Judging_from_the_outside_how_c"
)], na.rm = TRUE)
data$Space_Quality <- rowMeans(data[, c(
"Safety",
"Comfort",
"Welcoming",
"Ease_of_Access"
)], na.rm = TRUE)
# Normalize constructs and elements (optional)
constructs <- data.frame(
Safety = data$Safety,
Comfort = data$Comfort,
Cultural_Connection = data$Welcoming  # Assuming 'Welcoming' represents cultural connection
)
View(constructs)
elements <- data.frame(
Greenery = data$Greenery,
Seating = data$Seating,
Barriers = data$Barriers,
Pathways = data$Pathways,
Lighting = data$Lighting,
Signage = data$Signage,
Hazards = data$Hazards,
Buildings = data$Buildings,
Street = data$Street,
Transition = data$Transition
)
data$Greenery <- ifelse(data$Some_Greenery_Variable == "Dense", 1, 0)
str(data)
data$Greenery <- rowMeans(data[, c("Tree_Density", "Grass_Coverage")], na.rm = TRUE)
data$Greenery <- rowMeans(data[, c(
"Judging_from_the_outside_how_c",  # Placeholder for greenery-related score
"How_safe_do_you_feel_it_is_to_"   # Another related variable if applicable
)], na.rm = TRUE)
data$Seating <- rowMeans(data[, c(
"How_comfortable_do_you_feel_to",  # Placeholder for seating-related score
"How_comfortable_would_you_feel"   # Another related variable if applicable
)], na.rm = TRUE)
data$Barriers <- rowMeans(data[, c(
"How_safe_do_you_feel_it_is_to_",  # Placeholder for barrier-related score
"How_safe_would_you_feel_in_thi"   # Another related variable if applicable
)], na.rm = TRUE)
data$Pathways <- rowMeans(data[, c(
"How_easy_does_it_seem_to_enter",  # Placeholder for pathway-related score
"How_easy_would_it_be_to_move_a"   # Another related variable if applicable
)], na.rm = TRUE)
data$Lighting <- rowMeans(data[, c(
"Judging_from_the_outside_how_w",  # Placeholder for lighting-related score
"How_safe_would_you_feel_enteri"   # Another related variable if applicable
)], na.rm = TRUE)
data$Signage <- rowMeans(data[, c(
"Do_you_think_this_would_be_a_g",  # Placeholder for signage-related score
"How_likely_are_you_to_use_this"   # Another related variable if applicable
)], na.rm = TRUE)
data$Hazards <- rowMeans(data[, c(
"How_safe_do_you_feel_it_is_to_",  # Placeholder for hazard-related score
"X_How_safe_would_you_feel_in_t"   # Another related variable if applicable
)], na.rm = TRUE)
data$Buildings <- rowMeans(data[, c(
"How_connected_do_you_feel_to_t",  # Placeholder for building-related score
"How_connected_do_you_feel_to_t.1" # Another related variable if applicable
)], na.rm = TRUE)
data$Street <- rowMeans(data[, c(
"How_easy_does_it_seem_to_enter.1", # Placeholder for street-related score
"How_likely_are_you_to_use_this.1"  # Another related variable if applicable
)], na.rm = TRUE)
data$Transition <- rowMeans(data[, c(
"How_welcome_do_you_feel_to_ent",  # Placeholder for transition-related score
"How_much_do_feel_you_belong_in"   # Another related variable if applicable
)], na.rm = TRUE)
summary(data[, c(
"Greenery", "Seating", "Barriers", "Pathways",
"Lighting", "Signage", "Hazards", "Buildings",
"Street", "Transition"
)])
str(data)
# Perform regression
safety_model <- lm(Safety ~ Greenery + Seating + Barriers + Pathways + Lighting + Signage + Hazards + Buildings + Street + Transition, data = data)
# View regression results
summary(safety_model)
# Extract coefficients (exclude intercept)
coef_safety <- abs(safety_model$coefficients[-1])  # Ignore the intercept
total_coef <- sum(coef_safety)  # Sum of absolute coefficients
# Calculate percentage impacts
percentage_impact_safety <- (coef_safety / total_coef) * 100
# Create a data frame for visualization
impact_df <- data.frame(
Element = names(coef_safety),
Percentage_Impact = percentage_impact_safety
)
# View the percentage impact
print(impact_df)
# Example for Comfort
comfort_model <- lm(Comfort ~ Greenery + Seating + Barriers + Pathways + Lighting + Signage + Hazards + Buildings + Street + Transition, data = data)
summary(comfort_model)
# Calculate percentage impacts for Comfort
coef_comfort <- abs(comfort_model$coefficients[-1])
percentage_impact_comfort <- (coef_comfort / sum(coef_comfort)) * 100
impact_df_comfort <- data.frame(
Element = names(coef_comfort),
Percentage_Impact = percentage_impact_comfort
)
print(impact_df_comfort)
library(ggplot2)
# Bar chart for Safety
ggplot(impact_df, aes(x = Element, y = Percentage_Impact)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Percentage Impact of Elements on Safety", y = "Percentage Impact", x = "Element")
# Bar chart for Comfort
ggplot(impact_df_comfort, aes(x = Element, y = Percentage_Impact)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Percentage Impact of Elements on Comfort", y = "Percentage Impact", x = "Element")
# Create a new Word document
doc <- read_docx()
# Add Impact of Safety table
doc <- doc %>%
body_add_par("Impact of Elements on Safety", style = "heading 1") %>%
body_add_flextable(flextable(impact_safety)) %>%
body_add_par("")
View(comfort_model)
View(comfort_model)
View(constructs)
View(constructs)
View(impact_df)
View(impact_df_comfort)
View(responses_1_)
View(safety_model)
View(safety_model)
# Summarize the data grouped by What_is_your_age_group
summary_table <- data %>%
tbl_summary(
by = What_is_your_age_group,  # Group by the age group
include = c(Safety, Comfort, Welcoming, Ease_of_Access, Likelihood_of_Use,
Interactivity, Belongingness, Outside_Judgment, Space_Quality,
Greenery, Seating, Barriers, Pathways, Lighting, Signage, Hazards,
Buildings, Street, Transition),  # Variables to include in the summary
statistic = list(all_continuous() ~ "{mean} ({sd})")  # Show mean and SD for continuous variables
) %>%
add_p()  # Add p-values for group comparisons
# Summarize the data grouped by What_is_your_age_group
library(gtsummary)
summary_table <- data %>%
tbl_summary(
by = What_is_your_age_group,  # Group by the age group
include = c(Safety, Comfort, Welcoming, Ease_of_Access, Likelihood_of_Use,
Interactivity, Belongingness, Outside_Judgment, Space_Quality,
Greenery, Seating, Barriers, Pathways, Lighting, Signage, Hazards,
Buildings, Street, Transition),  # Variables to include in the summary
statistic = list(all_continuous() ~ "{mean} ({sd})")  # Show mean and SD for continuous variables
) %>%
add_p()  # Add p-values for group comparisons
# Print the summary table
summary_table
summary_table_student <- data %>%
tbl_summary(
by = Are_you_a_student_at_Medgar_Ev,  # Group by Medgar Evers student status
include = c(Safety, Comfort, Welcoming, Ease_of_Access, Likelihood_of_Use,
Interactivity, Belongingness, Outside_Judgment, Space_Quality,
Greenery, Seating, Barriers, Pathways, Lighting, Signage, Hazards,
Buildings, Street, Transition),  # Variables to include in the summary
statistic = list(all_continuous() ~ "{mean} ({sd})")  # Show mean and SD for continuous variables
) %>%
add_p(test = all_continuous() ~ "t.test")  # Add p-values using a t-test
summary_table_student
summary_table_cornell <- data %>%
tbl_summary(
by = Are_you_a_Cornell_University_S,  # Group by Cornell University student status
include = c(Safety, Comfort, Welcoming, Ease_of_Access, Likelihood_of_Use,
Interactivity, Belongingness, Outside_Judgment, Space_Quality,
Greenery, Seating, Barriers, Pathways, Lighting, Signage, Hazards,
Buildings, Street, Transition),  # Variables to include in the summary
statistic = list(all_continuous() ~ "{mean} ({sd})")  # Show mean and SD for continuous variables
) %>%
add_p(test = all_continuous() ~ "t.test")  # Add p-values using a t-test
summary_table_cornell
View(data)
summary_table_bedstuy <- data %>%
tbl_summary(
by = Are_you_a_resident_of_Bed_Stuy,  # Group by residency status in Bed-Stuy
include = c(Safety, Comfort, Welcoming, Ease_of_Access, Likelihood_of_Use,
Interactivity, Belongingness, Outside_Judgment, Space_Quality,
Greenery, Seating, Barriers, Pathways, Lighting, Signage, Hazards,
Buildings, Street, Transition),  # Variables to include in the summary
statistic = list(all_continuous() ~ "{mean} ({sd})")  # Show mean and SD for continuous variables
) %>%
add_p(test = all_continuous() ~ "t.test")  # Add p-values using a t-test
summary_table_bedstuy
# Perform regression analysis
safety_model <- lm(Safety ~ Greenery + Seating + Barriers + Pathways + Lighting + Signage + Hazards + Buildings + Street + Transition, data = data)
# View summary of the model
summary(safety_model)
# Load the libraries
library(broom)
library(flextable)
library(officer)
# Fit the regression model
safety_model <- lm(Safety ~ Greenery + Seating + Barriers + Pathways + Lighting + Signage + Hazards + Buildings + Street + Transition, data = data)
# Tidy the regression summary
model_summary <- broom::tidy(safety_model)
# Convert the model summary to a flextable
model_table_ft <- flextable(model_summary) %>%
set_header_labels(
term = "Predictor",
estimate = "Estimate",
std.error = "Std. Error",
statistic = "t-Value",
p.value = "P-Value"
) %>%
autofit()  # Adjust table layout for better appearance
# Create a Word document and add the flextable
doc <- read_docx() %>%
body_add_par("Regression Model Summary", style = "heading 1") %>%
body_add_flextable(model_table_ft) %>%
print(target = "safety_model_summary.docx")
# Output message
cat("The regression model summary has been exported to 'safety_model_summary.docx'.")
library(officer)
library(flextable)
library(ggplot2)
# Ensure the data frame has the relevant columns (replace this with your actual data)
data <- data.frame(
Safety = rnorm(46, 7, 1),
Comfort = rnorm(46, 6.5, 1),
Greenery = rnorm(46, 8, 1),
Seating = rnorm(46, 7, 1),
Barriers = rnorm(46, 6, 1),
Pathways = rnorm(46, 5.5, 1),
Lighting = rnorm(46, 7, 1),
Signage = rnorm(46, 5, 1),
Hazards = rnorm(46, 6, 1),
Buildings = rnorm(46, 4.5, 1),
Street = rnorm(46, 3.5, 1),
Transition = rnorm(46, 5.5, 1)
)
# Perform regression analysis for Safety
safety_model <- lm(Safety ~ Greenery + Seating + Barriers + Pathways + Lighting +
Signage + Hazards + Buildings + Street + Transition, data = data)
# Extract coefficients
coef_safety <- abs(safety_model$coefficients[-1])  # Exclude intercept
total_coef <- sum(coef_safety)  # Total sum of coefficients
# Calculate percentage contributions
percentage_contribution_safety <- (coef_safety / total_coef) * 100
# Create a data frame for contributions
impact_safety <- data.frame(
Element = names(coef_safety),
Percentage_Contribution = percentage_contribution_safety
)
# Create a Word document
doc <- read_docx()
# Add title
doc <- doc %>%
body_add_par("Impact of Garden Elements on Safety", style = "heading 1")
# Convert the table to flextable and add to the document
impact_table_safety <- flextable(impact_safety)
doc <- doc %>%
body_add_flextable(impact_table_safety) %>%
body_add_par("")
# Save the document
print(doc, target = "Impact_Safety.docx")
# Perform regression analysis for Comfort
comfort_model <- lm(Comfort ~ Greenery + Seating + Barriers + Pathways + Lighting +
Signage + Hazards + Buildings + Street + Transition, data = data)
# Extract coefficients
coef_comfort <- abs(comfort_model$coefficients[-1])  # Exclude intercept
total_coef_comfort <- sum(coef_comfort)  # Total sum of coefficients
# Calculate percentage contributions
percentage_contribution_comfort <- (coef_comfort / total_coef_comfort) * 100
# Create a data frame for contributions
impact_comfort <- data.frame(
Element = names(coef_comfort),
Percentage_Contribution = percentage_contribution_comfort
)
# Add the Comfort table to the document
doc <- doc %>%
body_add_par("Impact of Garden Elements on Comfort", style = "heading 1") %>%
body_add_flextable(flextable(impact_comfort)) %>%
body_add_par("")
ggplot(impact_safety, aes(x = Element, y = Percentage_Contribution)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Percentage Contribution of Elements to Safety",
x = "Element",
y = "Percentage Contribution (%)") +
theme_minimal()
ggplot(impact_comfort, aes(x = Element, y = Percentage_Contribution)) +
geom_bar(stat = "identity", fill = "darkgreen") +
labs(title = "Percentage Contribution of Elements to Comfort",
x = "Element",
y = "Percentage Contribution (%)") +
theme_minimal()
print(doc, target = "Impact_Analysis.docx")
library(writexl)
# Export the data to an Excel file
write_xlsx(data, "Garden_Data.xlsx")
View(data)
View(data)
